classdef ConsistencyRegularization
methods(Access = protected)
        function C4 = assemble_consistency(obj)

            const_names = obj.get_const_names(); % Cell array

            nb = obj.neighbors;
            rows = []; cols = []; terms = [];
            pnames = obj.names_all;
            row_idx = 1;
            [dn, dsig] = obj.dom2dndsig();
            keep_idx = obj.dom2keep_idx();
            for cell_idx = 1:obj.mesh.ncells
                for eq = 1:numel(const_names)
                    col = [obj.findn(pnames, ['cell ',num2str(cell_idx),': d^1u/dy^1', const_names{eq}]) , ...
                        obj.findn(pnames, ['cell ',num2str(nb(1, cell_idx)),': u0', const_names{eq}]) , ...
                        obj.findn(pnames, ['cell ',num2str(nb(3, cell_idx)),': u0', const_names{eq}]) , ...
                        obj.findn(pnames, ['cell ',num2str(cell_idx),': d^1v/dy^1', const_names{eq}]) , ...
                        obj.findn(pnames, ['cell ',num2str(nb(1, cell_idx)),': v0', const_names{eq}]) , ...
                        obj.findn(pnames, ['cell ',num2str(nb(3, cell_idx)),': v0', const_names{eq}]) , ...
                        obj.findn(pnames, ['cell ',num2str(cell_idx),': d^1w/dy^1', const_names{eq}]) , ...
                        obj.findn(pnames, ['cell ',num2str(nb(1, cell_idx)),': w0', const_names{eq}]) , ...
                        obj.findn(pnames, ['cell ',num2str(nb(3, cell_idx)),': w0', const_names{eq}]) , ...
                        obj.findn(pnames, ['cell ',num2str(cell_idx),': d^1u/dsig^1', const_names{eq}]) , ...
                        obj.findn(pnames, ['cell ',num2str(nb(2, cell_idx)),': u0', const_names{eq}]) , ...
                        obj.findn(pnames, ['cell ',num2str(nb(4, cell_idx)),': u0', const_names{eq}]) , ...
                        obj.findn(pnames, ['cell ',num2str(cell_idx),': d^1v/dsig^1', const_names{eq}]) , ...
                        obj.findn(pnames, ['cell ',num2str(nb(2, cell_idx)),': v0', const_names{eq}]) , ...
                        obj.findn(pnames, ['cell ',num2str(nb(4, cell_idx)),': v0', const_names{eq}]) , ...
                        obj.findn(pnames, ['cell ',num2str(cell_idx),': d^1w/dsig^1', const_names{eq}]) , ...                        
                        obj.findn(pnames, ['cell ',num2str(nb(2, cell_idx)),': w0', const_names{eq}]), ...
                        obj.findn(pnames, ['cell ',num2str(nb(4, cell_idx)),': w0', const_names{eq}])];

                    row = row_idx + [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5]; % Row incremental index, always the same
                    term = [1, -1/(dn(cell_idx)), 1/(dn(cell_idx)),...
                        1, -1/(dn(cell_idx)), 1/(dn(cell_idx)),...
                        1, -1/(dn(cell_idx)), 1/(dn(cell_idx)),...
                        1, -1/(dsig(cell_idx)), 1/(dsig(cell_idx)), 1, -1/(dsig(cell_idx)), 1/(dsig(cell_idx)),...
                        1, -1/(dsig(cell_idx)), 1/(dsig(cell_idx))]; % Value, always the same (but look at order of magnitudes difference between the values...)
                    
                    rows = [rows row(keep_idx{cell_idx})];
                    cols = [cols col(keep_idx{cell_idx})];%(keep_idx{cell_idx})];
                    terms = [terms term(keep_idx{cell_idx})];
                    if ~isempty(rows)
                        row_idx = max(rows) + 1;
                    end
                end
            end
            C4 = sparse(rows, cols, terms, 6*obj.mesh.ncells*numel(const_names), obj.mesh.ncells*sum(obj.model.npars));
        end
end
end